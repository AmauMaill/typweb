{"version":3,"mappings":"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","names":["translations","LanguageService","__publicField","savedLang","key","translation","page","response","fallbackResponse","error","link","langBtn","Website","e","_a","path","basePath","url","html","ProjectsLoader","__vitePreload","isActive","themeToggle","contactForm","isDarkTheme","formData"],"ignoreList":[],"sources":["../../src/translations.ts","../../src/language-service.ts","../../src/main.ts"],"sourcesContent":["export type Language = 'en' | 'fr';\n\ninterface Translations {\n    [key: string]: {\n        en: string;\n        fr: string;\n    };\n}\n\nexport const translations: Translations = {\n    'nav.home': {\n        en: 'Home',\n        fr: 'Accueil'\n    },\n    'nav.about': {\n        en: 'About',\n        fr: 'Ã€ propos'\n    },\n    'nav.projects': {\n        en: 'Projects',\n        fr: 'Projets'\n    },\n    'nav.contact': {\n        en: 'Contact',\n        fr: 'Contact'\n    }\n};","import { Language, translations } from './translations';\n\nexport class LanguageService {\n    private currentLang: Language;\n    private readonly LANG_KEY = 'preferred_language';\n\n    constructor() {\n        const savedLang = localStorage.getItem(this.LANG_KEY) as Language;\n        this.currentLang = savedLang || this.getBrowserLanguage();\n        this.updateHtmlLang();\n    }\n\n    private getBrowserLanguage(): Language {\n        const browserLang = navigator.language.split('-')[0];\n        return browserLang === 'fr' ? 'fr' : 'en';\n    }\n\n    getCurrentLanguage(): Language {\n        return this.currentLang;\n    }\n\n    toggleLanguage(): void {\n        this.currentLang = this.currentLang === 'en' ? 'fr' : 'en';\n        localStorage.setItem(this.LANG_KEY, this.currentLang);\n        this.updateHtmlLang();\n        this.updatePageText();\n    }\n\n    private updateHtmlLang(): void {\n        document.documentElement.lang = this.currentLang;\n    }\n\n    translate(key: string): string {\n        const translation = translations[key];\n        if (!translation) {\n            console.warn(`Translation missing for key: ${key}`);\n            return key;\n        }\n        return translation[this.currentLang];\n    }\n\n    async loadPageContent(page: string): Promise<string> {\n        try {\n            console.log(`Loading page ${page} in ${this.currentLang}`);\n            const response = await fetch(`/src/pages/${this.currentLang}/${page}.html`);\n            if (!response.ok) {\n                // Fallback to English if translation doesn't exist\n                console.warn(`No ${this.currentLang} version found for ${page}, falling back to English`);\n                const fallbackResponse = await fetch(`/src/pages/en/${page}.html`);\n                if (!fallbackResponse.ok) {\n                    throw new Error(`Page ${page} not found in any language`);\n                }\n                return await fallbackResponse.text();\n            }\n            return await response.text();\n        } catch (error) {\n            console.error('Error loading page:', error);\n            throw error;\n        }\n    }\n\n    private updatePageText(): void {\n        // Update navigation text\n        const navLinks = document.querySelectorAll('.nav-link');\n        navLinks.forEach(link => {\n            const key = link.getAttribute('data-translate-key');\n            if (key) {\n                link.textContent = this.translate(key);\n            }\n        });\n\n        // Update language toggle button\n        const langBtn = document.getElementById('langToggle');\n        if (langBtn) {\n            langBtn.textContent = this.currentLang.toUpperCase();\n        }\n    }\n}","import './styles/main.css'\nimport { LanguageService } from './language-service';\n\ninterface ContactForm {\n    name: string;\n    email: string;\n    message: string;\n}\n\nclass Website {\n    private currentPage: string = 'home';\n    private contentDiv: HTMLElement;\n    private navLinks: NodeListOf<HTMLAnchorElement>;\n    private languageService: LanguageService;\n    private langToggle: HTMLButtonElement;\n\n    constructor() {\n        this.contentDiv = document.getElementById('content') as HTMLElement;\n        this.navLinks = document.querySelectorAll('.nav-link');\n        this.langToggle = document.getElementById('langToggle') as HTMLButtonElement;\n        this.languageService = new LanguageService();\n        \n        this.initializeEventListeners();\n        this.loadInitialPage();\n    }\n\n    private initializeEventListeners(): void {\n        // Handle navigation\n        this.navLinks.forEach(link => {\n            link.addEventListener('click', (e) => {\n                e.preventDefault();\n                const page = link.dataset.page || 'home';\n                this.navigateToPage(page);\n            });\n        });\n\n        // Handle language toggle\n        if (this.langToggle) {\n            this.langToggle.addEventListener('click', () => {\n                this.languageService.toggleLanguage();\n                this.loadPage(this.currentPage);\n            });\n        }\n\n        // Handle browser back/forward buttons\n        window.addEventListener('popstate', (e) => {\n            const page = e.state?.page || 'home';\n            this.loadPage(page);\n        });\n    }\n\n    private async loadInitialPage(): Promise<void> {\n        // Get the current path from the URL\n        const path = window.location.pathname;\n        const page = path === '/' ? 'home' : path.slice(1);\n        await this.loadPage(page);\n    }\n\n    private async navigateToPage(page: string): Promise<void> {\n        // Update URL\n        const basePath = '/typweb';\n        const url = page === 'home' ? `${basePath}/` : `${basePath}/${page}`;\n        history.pushState({ page }, '', url);\n        await this.loadPage(page);\n    }\n\n    private async loadPage(page: string): Promise<void> {\n        try {\n            const html = await this.languageService.loadPageContent(page);\n            \n            // Update content area only\n            if (this.contentDiv) {\n                this.contentDiv.innerHTML = html;\n            }\n            \n            // Update current page and active link\n            this.currentPage = page;\n            this.updateActiveNavLink();\n\n            // Initialize page-specific features\n            this.initializePageFeatures();\n            \n            // Initialize projects loader if on projects page\n            if (page === 'projects') {\n                const { ProjectsLoader } = await import('./projects-loader');\n                const projectsLoader = new ProjectsLoader();\n                await projectsLoader.initialize();\n            }\n        } catch (error) {\n            console.error('Error loading page:', error);\n            this.contentDiv.innerHTML = '<h1>Page Not Found</h1>';\n        }\n    }\n\n    private updateActiveNavLink(): void {\n        this.navLinks.forEach(link => {\n            const isActive = link.dataset.page === this.currentPage;\n            link.classList.toggle('active', isActive);\n        });\n    }\n\n    private initializePageFeatures(): void {\n        // Initialize theme toggle if it exists on the current page\n        const themeToggle = document.getElementById('themeToggle');\n        if (themeToggle) {\n            themeToggle.addEventListener('click', () => this.toggleTheme());\n        }\n\n        // Initialize contact form if it exists on the current page\n        const contactForm = document.getElementById('contactForm');\n        if (contactForm) {\n            contactForm.addEventListener('submit', (e) => this.handleFormSubmit(e));\n        }\n    }\n\n    private toggleTheme(): void {\n        document.body.classList.toggle('dark-theme');\n        const isDarkTheme = document.body.classList.contains('dark-theme');\n        localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');\n    }\n\n    private async handleFormSubmit(e: Event): Promise<void> {\n        e.preventDefault();\n\n        const formData: ContactForm = {\n            name: (document.getElementById('name') as HTMLInputElement).value,\n            email: (document.getElementById('email') as HTMLInputElement).value,\n            message: (document.getElementById('message') as HTMLTextAreaElement).value\n        };\n\n        try {\n            // Here you would typically send the data to a server\n            console.log('Form submitted:', formData);\n            (e.target as HTMLFormElement).reset();\n            alert('Message sent successfully!');\n        } catch (error) {\n            console.error('Error submitting form:', error);\n            alert('Failed to send message. Please try again.');\n        }\n    }\n}\n\n// Initialize the website\nwindow.addEventListener('DOMContentLoaded', () => {\n    new Website();\n});"],"file":"assets/index-gLXovnyt.js"}